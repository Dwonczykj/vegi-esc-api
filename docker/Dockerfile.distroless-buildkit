# Container for building the environment
# ~ https://stackoverflow.com/a/71611002 + first comment for docker run adding a --platform linux/x86_64 as first arg to command
FROM --platform=linux/amd64 condaforge/mambaforge:4.9.2-5 as conda

RUN apt-get update && \
  apt-get install -y libpq-dev gcc

COPY predict-linux-64.lock .

# RUN mamba create --copy -p /env --file predict-linux-64.lock && conda clean -afy
# Use mount to use build kits ability to cache a conda package installation so dont have to reinstall deps
RUN --mount=type=cache,target=/opt/conda/pkgs mamba create --copy -p /env --file predict-linux-64.lock && echo 4
## ~ https://docs.docker.com/build/cache/
# RUN --mount=type=cache,target=/opt/homebrew/Caskroom/miniconda/base/pkgs mamba env create -p /env --file predict-linux-64.lock && echo 4
COPY . /pkg
## install a package (already created) within a specific Conda environment
RUN conda run -p /env python -m pip install --no-deps /pkg 

# Distroless for execution
FROM gcr.io/distroless/base-debian11:debug-nonroot
# FROM gcr.io/distroless/python3-debian11:debug-nonroot

COPY --from=conda /env $HOME/env
# COPY --from=conda /env /env

# Copy models from  localmachine to container to save downloading them
# RUN mkdir -p /models
# COPY models/word2vec-google-news-300 /models
# COPY models/word2vec-google-news-300.vectors.npy /models
# COPY /models /models
COPY /entrypoint.sh /entrypoint.sh
# RUN chmod +x /entrypoint.sh
COPY /.chromadb /.chromadb
# RUNS AGAIN WHEN ARG CHANGES VALUE: https://stackoverflow.com/a/58800289
# ARG FOO=bar
# RUN echo $HOME # ! wont run as no shell for distroless
# RUN cp /.chromadb $HOME/.chromadb # ! wont run as no shell for distroless

CMD [ \
  # "sh", "-c", \
  "/entrypoint.sh" \
  ]
